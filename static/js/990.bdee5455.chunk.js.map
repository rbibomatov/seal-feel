{"version":3,"file":"static/js/990.bdee5455.chunk.js","mappings":"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","sources":["webpack://seal-feel/./src/components/Content/Profile/ProfileInfo/ProfileInfo.module.css?44c3","components/Content/Profile/ProfileInfo/ProfileStatus/ProfileStatus.jsx","components/Content/Profile/ProfileInfo/ProfileInfo.jsx","webpack://seal-feel/./src/components/Content/Profile/MyPosts/MyPosts.module.css?2f9f","webpack://seal-feel/./src/components/Content/Profile/MyPosts/Post/Post.module.css?633c","components/Content/Profile/MyPosts/Post/Post.jsx","components/Content/Profile/MyPosts/MyPosts.jsx","components/Content/Profile/Profile.jsx","hoc/withAuthRedirect.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__pIdwp\",\"profileBackground\":\"ProfileInfo_profileBackground__PHNmD\",\"avatarBar\":\"ProfileInfo_avatarBar__uie71\",\"profileAvatar\":\"ProfileInfo_profileAvatar__qQeFi\",\"changeAvatarButton\":\"ProfileInfo_changeAvatarButton__yimBr\",\"profileName\":\"ProfileInfo_profileName__0xrcz\",\"profileDescription\":\"ProfileInfo_profileDescription__+VeZ3\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__xzxSV\",\"descriptionInfo\":\"ProfileInfo_descriptionInfo__51H27\",\"descriptionName\":\"ProfileInfo_descriptionName__OORJ-\",\"descriptionItem\":\"ProfileInfo_descriptionItem__bbHtf\",\"descriptionItemHeader\":\"ProfileInfo_descriptionItemHeader__xvTmO\"};","import { useState, useEffect } from \"react\";\r\nimport styles from \"./ProfileStatus.module.css\";\r\n\r\nconst ProfileStatus = (props) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activeEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactiveEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            maxLength=\"300\"\r\n            autoFocus={true}\r\n            onChange={onStatusChange}\r\n            onBlur={deactiveEditMode}\r\n            value={status}\r\n          />\r\n        </div>\r\n      )}\r\n      {!editMode && (\r\n        <div>\r\n          <span onClick={activeEditMode}>{status}</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatus;\r\n","import styles from \"./ProfileInfo.module.css\";\r\nimport profileBackground from \"./../../../../images/Content/Profile/ProfileBackground.jpg\";\r\nimport defaultAvatar from \"./../../../../images/Common/DefaultUserAvatar.png\";\r\nimport ProfileStatus from \"./ProfileStatus/ProfileStatus\";\r\nimport Preloader from \"../../../Common/Preloader/Preloader\";\r\n\r\nconst ProfileInfo = (props) => {\r\n  let profile = props.profile,\r\n    contacts = props.profile?.contacts;\r\n\r\n  const showDescriptionContent = (itemHeader, profileData, createRef) => {\r\n    if (profile) {\r\n      let descriptionItems = [],\r\n        emptyDataCount = 0,\r\n        noDataElement = <div>Информация отсутствует</div>;\r\n\r\n      for (let i = 0; i < profileData.length; i++) {\r\n        let profileElement = profileData[i];\r\n\r\n        if (profileElement) {\r\n          if (typeof profileElement === \"boolean\") {\r\n            profileElement = profileElement ? \"Да\" : \"Нет\";\r\n          }\r\n\r\n          descriptionItems.push(\r\n            <div className={styles.descriptionItem}>\r\n              <span className={styles.descriptionItemHeader}>\r\n                {itemHeader[i] + \":\"}\r\n              </span>\r\n              {createRef ? (\r\n                <a\r\n                  href={\"https://\" + profileElement}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  {profileElement}\r\n                </a>\r\n              ) : (\r\n                <span>{profileElement}</span>\r\n              )}\r\n            </div>\r\n          );\r\n        } else {\r\n          emptyDataCount++;\r\n        }\r\n      }\r\n\r\n      return emptyDataCount === profileData.length\r\n        ? noDataElement\r\n        : descriptionItems;\r\n    }\r\n  };\r\n\r\n  const onAvatarSelected = (e) => {\r\n    if (e.target.files.length) {\r\n      props.saveUserAvatar(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  if (profile) {\r\n    return (\r\n      <div className={styles.profileInfo}>\r\n        <img\r\n          className={styles.profileBackground}\r\n          src={profileBackground}\r\n          alt=\"Фон профиля\"\r\n        />\r\n\r\n        <div className={styles.avatarBar}>\r\n          <img\r\n            className={styles.profileAvatar}\r\n            src={profile.photos?.large || defaultAvatar}\r\n            alt=\"Аватар пользователя\"\r\n          />\r\n          {props.isOnwer && (\r\n            <div>\r\n              <input\r\n                className={styles.changeAvatarButton}\r\n                type=\"file\"\r\n                onChange={onAvatarSelected}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className={styles.profileDescription}>\r\n          <div className={styles.profileName}>{profile?.fullName}</div>\r\n          <ProfileStatus\r\n            status={props.status}\r\n            updateStatus={props.updateStatus}\r\n          />\r\n          <div className={styles.descriptionBlock}>\r\n            <div className={styles.descriptionInfo}>\r\n              <div className={styles.descriptionName}>Обо мне:</div>\r\n              {showDescriptionContent(\r\n                [\"Статус\", \"Ищу работу\", \"Описание исковой работы\"],\r\n                [\r\n                  profile?.aboutMe,\r\n                  profile?.lookingForAJob,\r\n                  profile?.lookingForAJobDescription,\r\n                ]\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className={styles.descriptionBlock}>\r\n            <div className={styles.descriptionInfo}>\r\n              <div className={styles.descriptionName}>Контакты:</div>\r\n              {showDescriptionContent(\r\n                [\r\n                  \"Facebook\",\r\n                  \"Website\",\r\n                  \"VK\",\r\n                  \"Twitter\",\r\n                  \"Instagram\",\r\n                  \"Youtube\",\r\n                  \"Github\",\r\n                ],\r\n                [\r\n                  contacts?.facebook,\r\n                  contacts?.website,\r\n                  contacts?.vk,\r\n                  contacts?.twitter,\r\n                  contacts?.instagram,\r\n                  contacts?.youtube,\r\n                  contacts?.github,\r\n                ],\r\n                true\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <Preloader />;\r\n  }\r\n};\r\n\r\nexport default ProfileInfo;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"myPosts\":\"MyPosts_myPosts__Glpxs\",\"addPostForm\":\"MyPosts_addPostForm__PrfsG\",\"postTextArea\":\"MyPosts_postTextArea__tZz-n\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__HR20V\",\"userAvatar\":\"Post_userAvatar__wm7K3\",\"postText\":\"Post_postText__PnMPV\",\"textAuthor\":\"Post_textAuthor__-dwe5\",\"textMessage\":\"Post_textMessage__kXwzl\",\"postTime\":\"Post_postTime__GO6PX\"};","import styles from \"./Post.module.css\";\r\nimport defaultAvatar from \"./../../../../../images/Common/DefaultUserAvatar.png\";\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={styles.post}>\r\n      <img className={styles.userAvatar} src={defaultAvatar} alt=\"\" />\r\n      <div className={styles.postText}>\r\n        <div className={styles.textAuthor}>{props.currentUserLogin}</div>\r\n        <div className={styles.textMessage}>{props.message}</div>\r\n        <div className={styles.postTime}>\r\n          {props.createTime.toTimeString().slice(0, 5)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import styles from \"./MyPosts.module.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { addPost } from \"../../../../redux/profile.reducer\";\r\nimport Post from \"./Post/Post.jsx\";\r\n\r\nconst AddPostForm = (props) => {\r\n  const { register, handleSubmit, reset } = useForm();\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmit = (data) => {\r\n    dispatch(addPost(data.postText));\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <form className={styles.addPostForm} onSubmit={handleSubmit(onSubmit)}>\r\n      <textarea\r\n        className={styles.postTextArea}\r\n        {...register(\"postText\", {\r\n          required: true,\r\n        })}\r\n        placeholder=\"Расскажите, как у вас дела?\"\r\n      ></textarea>\r\n      <div>\r\n        <button type=\"submit\">Опубликовать</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst MyPosts = (props) => {\r\n  const profilePage = useSelector((state) => state.profilePage);\r\n\r\n  let postsElements = profilePage.posts.map((post) => {\r\n    return (\r\n      <Post\r\n        id={post.id}\r\n        key={\"post_\" + post.id}\r\n        message={post.message}\r\n        createTime={post.createTime}\r\n        currentUserLogin={props.currentUserLogin}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className={styles.myPosts}>\r\n      <AddPostForm addPost={props.addPost} />\r\n      {postsElements}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyPosts;\r\n","import { compose } from \"redux\";\r\nimport withAuthRedirect from \"../../../hoc/withAuthRedirect\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getUserData,\r\n  updateStatus,\r\n  saveAvatar,\r\n} from \"../../../redux/profile.reducer\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\n\r\nconst Profile = (props) => {\r\n  const { userId } = useParams();\r\n\r\n  useEffect(() => {\r\n    props.getUserData(userId);\r\n  }, [userId]);\r\n\r\n  return (\r\n    <div>\r\n      <ProfileInfo {...props} isOnwer={props.currentUserId === userId} />\r\n      <MyPosts currentUserLogin={props.currentUserLogin} />\r\n    </div>\r\n  );\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    currentUserId: state.auth.currentUser.id,\r\n    currentUserLogin: state.auth.currentUser.login,\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { getUserData, updateStatus, saveAvatar }),\r\n  withAuthRedirect\r\n)(Profile);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nconst withAuthRedirect = (Component) => {\r\n  const RedirectComponent = (props) => {\r\n    if (!props.isAuth) {\r\n      return <Navigate to=\"/login\" />;\r\n    }\r\n\r\n    return <Component {...props} />;\r\n  };\r\n\r\n  return connect(mapStateToProps)(RedirectComponent);\r\n};\r\n\r\nexport default withAuthRedirect;\r\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","maxLength","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","onClick","profile","contacts","showDescriptionContent","itemHeader","profileData","createRef","descriptionItems","emptyDataCount","noDataElement","i","length","profileElement","push","className","styles","href","target","rel","src","profileBackground","alt","photos","large","defaultAvatar","isOnwer","type","files","saveUserAvatar","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","facebook","website","vk","twitter","instagram","youtube","github","Preloader","currentUserLogin","message","createTime","toTimeString","slice","AddPostForm","useForm","register","handleSubmit","reset","dispatch","useDispatch","onSubmit","data","addPost","postText","required","placeholder","postsElements","useSelector","state","profilePage","posts","map","post","id","compose","connect","currentUserId","auth","currentUser","login","getUserData","saveAvatar","withAuthRedirect","userId","useParams","mapStateToProps","isAuth","Component","to"],"sourceRoot":""}